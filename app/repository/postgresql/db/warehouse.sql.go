// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: warehouse.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProductToStock = `-- name: AddProductToStock :exec
INSERT INTO stocks(product_id, warehouse_id, quantity)
VALUES ($1, $2, $3)
`

type AddProductToStockParams struct {
	ProductID   int64 `db:"product_id"`
	WarehouseID int64 `db:"warehouse_id"`
	Quantity    int32 `db:"quantity"`
}

func (q *Queries) AddProductToStock(ctx context.Context, arg AddProductToStockParams) error {
	_, err := q.db.Exec(ctx, addProductToStock, arg.ProductID, arg.WarehouseID, arg.Quantity)
	return err
}

const createWarehouse = `-- name: CreateWarehouse :exec
INSERT INTO warehouses(shop_id, name, address)
VALUES ($1, $2, $3)
`

type CreateWarehouseParams struct {
	ShopID  int64  `db:"shop_id"`
	Name    string `db:"name"`
	Address string `db:"address"`
}

func (q *Queries) CreateWarehouse(ctx context.Context, arg CreateWarehouseParams) error {
	_, err := q.db.Exec(ctx, createWarehouse, arg.ShopID, arg.Name, arg.Address)
	return err
}

const decreaseStock = `-- name: DecreaseStock :execrows
UPDATE stocks
SET quantity = quantity - $1
WHERE
    product_id = $2 AND
    warehouse_id = $3 AND
    quantity >= $1
`

type DecreaseStockParams struct {
	Quantity    int32 `db:"quantity"`
	ProductID   int64 `db:"product_id"`
	WarehouseID int64 `db:"warehouse_id"`
}

func (q *Queries) DecreaseStock(ctx context.Context, arg DecreaseStockParams) (int64, error) {
	result, err := q.db.Exec(ctx, decreaseStock, arg.Quantity, arg.ProductID, arg.WarehouseID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getWarehousesByShopID = `-- name: GetWarehousesByShopID :many
SELECT w.id, w.name, w.status, w.shop_id FROM warehouses w WHERE w.shop_id = $1
`

type GetWarehousesByShopIDRow struct {
	ID     int64       `db:"id"`
	Name   string      `db:"name"`
	Status pgtype.Bool `db:"status"`
	ShopID int64       `db:"shop_id"`
}

func (q *Queries) GetWarehousesByShopID(ctx context.Context, shopID int64) ([]GetWarehousesByShopIDRow, error) {
	rows, err := q.db.Query(ctx, getWarehousesByShopID, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWarehousesByShopIDRow
	for rows.Next() {
		var i GetWarehousesByShopIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.ShopID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseStock = `-- name: IncreaseStock :execrows
UPDATE stocks
SET quantity = quantity + $1
WHERE
    product_id = $2 AND
    warehouse_id = $3
`

type IncreaseStockParams struct {
	Quantity    int32 `db:"quantity"`
	ProductID   int64 `db:"product_id"`
	WarehouseID int64 `db:"warehouse_id"`
}

func (q *Queries) IncreaseStock(ctx context.Context, arg IncreaseStockParams) (int64, error) {
	result, err := q.db.Exec(ctx, increaseStock, arg.Quantity, arg.ProductID, arg.WarehouseID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const reserveStock = `-- name: ReserveStock :exec
SELECT s.quantity
FROM stocks s
WHERE
    s.product_id = $1 AND
    s.warehouse_id = $2
FOR UPDATE
`

type ReserveStockParams struct {
	ProductID   int64 `db:"product_id"`
	WarehouseID int64 `db:"warehouse_id"`
}

func (q *Queries) ReserveStock(ctx context.Context, arg ReserveStockParams) error {
	_, err := q.db.Exec(ctx, reserveStock, arg.ProductID, arg.WarehouseID)
	return err
}

const updateProductStock = `-- name: UpdateProductStock :exec
UPDATE stocks
SET quantity = $1
WHERE
    product_id = $2 AND
    warehouse_id = $3
`

type UpdateProductStockParams struct {
	Quantity    int32 `db:"quantity"`
	ProductID   int64 `db:"product_id"`
	WarehouseID int64 `db:"warehouse_id"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) error {
	_, err := q.db.Exec(ctx, updateProductStock, arg.Quantity, arg.ProductID, arg.WarehouseID)
	return err
}
