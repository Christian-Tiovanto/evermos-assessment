// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProduct = `-- name: AddProduct :one
INSERT INTO products(name, description, price)
VALUES ($1, $2, $3)
RETURNING id
`

type AddProductParams struct {
	Name        string         `db:"name"`
	Description string         `db:"description"`
	Price       pgtype.Numeric `db:"price"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (int64, error) {
	row := q.db.QueryRow(ctx, addProduct, arg.Name, arg.Description, arg.Price)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT p.id, p.name, p.description::TEXT AS description, p.price::FLOAT AS price
FROM products p
INNER JOIN stocks s ON p.id = s.product_id
INNER JOIN warehouses w ON s.warehouse_id = w.id AND w.status = TRUE
WHERE p.id = $1
`

type GetProductByIDRow struct {
	ID          int64   `db:"id"`
	Name        string  `db:"name"`
	Description string  `db:"description"`
	Price       float64 `db:"price"`
}

func (q *Queries) GetProductByID(ctx context.Context, id int64) (GetProductByIDRow, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT p.id, p.name, p.description::TEXT AS description, p.price::FLOAT AS price, s.quantity, w.shop_id, w.id AS warehouse_id
FROM products p
INNER JOIN stocks s ON p.id = s.product_id
INNER JOIN warehouses w ON s.warehouse_id = w.id AND w.status = TRUE
`

type GetProductsRow struct {
	ID          int64   `db:"id"`
	Name        string  `db:"name"`
	Description string  `db:"description"`
	Price       float64 `db:"price"`
	Quantity    int32   `db:"quantity"`
	ShopID      int64   `db:"shop_id"`
	WarehouseID int64   `db:"warehouse_id"`
}

func (q *Queries) GetProducts(ctx context.Context) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.ShopID,
			&i.WarehouseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByShopID = `-- name: GetProductsByShopID :many
SELECT p.id, p.name, p.description::TEXT AS description, p.price::FLOAT AS price, s.quantity, w.shop_id, s.warehouse_id
FROM products p
INNER JOIN stocks s ON p.id = s.product_id
INNER JOIN warehouses w ON s.warehouse_id = w.id AND w.status = TRUE
WHERE w.shop_id = $1
`

type GetProductsByShopIDRow struct {
	ID          int64   `db:"id"`
	Name        string  `db:"name"`
	Description string  `db:"description"`
	Price       float64 `db:"price"`
	Quantity    int32   `db:"quantity"`
	ShopID      int64   `db:"shop_id"`
	WarehouseID int64   `db:"warehouse_id"`
}

func (q *Queries) GetProductsByShopID(ctx context.Context, shopID int64) ([]GetProductsByShopIDRow, error) {
	rows, err := q.db.Query(ctx, getProductsByShopID, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsByShopIDRow
	for rows.Next() {
		var i GetProductsByShopIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.ShopID,
			&i.WarehouseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
