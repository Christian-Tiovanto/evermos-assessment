// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package dbgen

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "users"("email", "phone", "password")
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Email    string `db:"email"`
	Phone    string `db:"phone"`
	Password string `db:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Email, arg.Phone, arg.Password)
	return err
}

const getUserByEmailOrPhone = `-- name: GetUserByEmailOrPhone :one
SELECT id, email, phone, password, created_at, updated_at FROM "users" WHERE "email" = $1 OR "phone" = $2
`

type GetUserByEmailOrPhoneParams struct {
	Email string `db:"email"`
	Phone string `db:"phone"`
}

func (q *Queries) GetUserByEmailOrPhone(ctx context.Context, arg GetUserByEmailOrPhoneParams) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByEmailOrPhone, arg.Email, arg.Phone)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, phone FROM "users" ORDER BY id
`

type GetUsersRow struct {
	ID    int64  `db:"id"`
	Email string `db:"email"`
	Phone string `db:"phone"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.ID, &i.Email, &i.Phone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
