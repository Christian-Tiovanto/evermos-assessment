// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/user/base.go
//
// Generated by this command:
//
//	mockgen -source=app/usecase/user/base.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	errors "github.com/mughieams/evermos-assessment/app/common/errors"
	db "github.com/mughieams/evermos-assessment/app/repository/postgresql/db"
	user "github.com/mughieams/evermos-assessment/app/usecase/user"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockUsecase) ComparePassword(hashedPassword, password []byte) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockUsecaseMockRecorder) ComparePassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockUsecase)(nil).ComparePassword), hashedPassword, password)
}

// GeneratePassword mocks base method.
func (m *MockUsecase) GeneratePassword(password []byte) (string, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GeneratePassword indicates an expected call of GeneratePassword.
func (mr *MockUsecaseMockRecorder) GeneratePassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePassword", reflect.TypeOf((*MockUsecase)(nil).GeneratePassword), password)
}

// Login mocks base method.
func (m *MockUsecase) Login(ctx context.Context, arg user.LoginParams) (string, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, arg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUsecaseMockRecorder) Login(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsecase)(nil).Login), ctx, arg)
}

// Register mocks base method.
func (m *MockUsecase) Register(ctx context.Context, arg user.RegisterParams) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, arg)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUsecaseMockRecorder) Register(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUsecase)(nil).Register), ctx, arg)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, arg db.CreateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, arg)
}

// GetUserByEmailOrPhone mocks base method.
func (m *MockRepository) GetUserByEmailOrPhone(ctx context.Context, arg db.GetUserByEmailOrPhoneParams) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailOrPhone", ctx, arg)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailOrPhone indicates an expected call of GetUserByEmailOrPhone.
func (mr *MockRepositoryMockRecorder) GetUserByEmailOrPhone(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailOrPhone", reflect.TypeOf((*MockRepository)(nil).GetUserByEmailOrPhone), ctx, arg)
}
