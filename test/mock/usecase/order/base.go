// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/order/base.go
//
// Generated by this command:
//
//	mockgen -source=app/usecase/order/base.go
//

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	errors "github.com/mughieams/evermos-assessment/app/common/errors"
	db "github.com/mughieams/evermos-assessment/app/repository/postgresql/db"
	order "github.com/mughieams/evermos-assessment/app/usecase/order"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockUsecase) CancelOrder(ctx context.Context, id int64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockUsecaseMockRecorder) CancelOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockUsecase)(nil).CancelOrder), ctx, id)
}

// CheckoutOrder mocks base method.
func (m *MockUsecase) CheckoutOrder(ctx context.Context, arg order.Order) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutOrder", ctx, arg)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// CheckoutOrder indicates an expected call of CheckoutOrder.
func (mr *MockUsecaseMockRecorder) CheckoutOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutOrder", reflect.TypeOf((*MockUsecase)(nil).CheckoutOrder), ctx, arg)
}

// UpdateStatus mocks base method.
func (m *MockUsecase) UpdateStatus(ctx context.Context, id int64, status order.Status) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockUsecaseMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockUsecase)(nil).UpdateStatus), ctx, id, status)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(ctx context.Context, arg db.CreateOrderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), ctx, arg)
}

// UpdateOrderStatus mocks base method.
func (m *MockRepository) UpdateOrderStatus(ctx context.Context, arg db.UpdateOrderStatusParams) (db.UpdateOrderStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, arg)
	ret0, _ := ret[0].(db.UpdateOrderStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockRepositoryMockRecorder) UpdateOrderStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockRepository)(nil).UpdateOrderStatus), ctx, arg)
}
