// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/shop/base.go
//
// Generated by this command:
//
//	mockgen -source=app/usecase/shop/base.go
//

// Package mock_shop is a generated GoMock package.
package mock_shop

import (
	context "context"
	reflect "reflect"

	v5 "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"

	errors "github.com/mughieams/evermos-assessment/app/common/errors"
	db "github.com/mughieams/evermos-assessment/app/repository/postgresql/db"
	product "github.com/mughieams/evermos-assessment/app/usecase/product"
	shop "github.com/mughieams/evermos-assessment/app/usecase/shop"
	warehouse "github.com/mughieams/evermos-assessment/app/usecase/warehouse"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockUsecase) AddProduct(ctx context.Context, arg shop.AddProductParams) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, arg)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockUsecaseMockRecorder) AddProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockUsecase)(nil).AddProduct), ctx, arg)
}

// CreateShop mocks base method.
func (m *MockUsecase) CreateShop(ctx context.Context, arg shop.CreateParams) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShop", ctx, arg)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// CreateShop indicates an expected call of CreateShop.
func (mr *MockUsecaseMockRecorder) CreateShop(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShop", reflect.TypeOf((*MockUsecase)(nil).CreateShop), ctx, arg)
}

// CreateWarehouse mocks base method.
func (m *MockUsecase) CreateWarehouse(ctx context.Context, arg warehouse.Warehouse) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarehouse", ctx, arg)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// CreateWarehouse indicates an expected call of CreateWarehouse.
func (mr *MockUsecaseMockRecorder) CreateWarehouse(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarehouse", reflect.TypeOf((*MockUsecase)(nil).CreateWarehouse), ctx, arg)
}

// GetProducts mocks base method.
func (m *MockUsecase) GetProducts(ctx context.Context, shopID int64) ([]product.Product, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, shopID)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockUsecaseMockRecorder) GetProducts(ctx, shopID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockUsecase)(nil).GetProducts), ctx, shopID)
}

// GetWarehouses mocks base method.
func (m *MockUsecase) GetWarehouses(ctx context.Context, shopID int64) ([]warehouse.Warehouse, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouses", ctx, shopID)
	ret0, _ := ret[0].([]warehouse.Warehouse)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetWarehouses indicates an expected call of GetWarehouses.
func (mr *MockUsecaseMockRecorder) GetWarehouses(ctx, shopID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouses", reflect.TypeOf((*MockUsecase)(nil).GetWarehouses), ctx, shopID)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateShop mocks base method.
func (m *MockRepository) CreateShop(ctx context.Context, arg db.CreateShopParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShop", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShop indicates an expected call of CreateShop.
func (mr *MockRepositoryMockRecorder) CreateShop(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShop", reflect.TypeOf((*MockRepository)(nil).CreateShop), ctx, arg)
}

// CreateWarehouse mocks base method.
func (m *MockRepository) CreateWarehouse(ctx context.Context, arg db.CreateWarehouseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarehouse", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWarehouse indicates an expected call of CreateWarehouse.
func (mr *MockRepositoryMockRecorder) CreateWarehouse(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarehouse", reflect.TypeOf((*MockRepository)(nil).CreateWarehouse), ctx, arg)
}

// GetProductsByShopID mocks base method.
func (m *MockRepository) GetProductsByShopID(ctx context.Context, shopID int64) ([]db.GetProductsByShopIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByShopID", ctx, shopID)
	ret0, _ := ret[0].([]db.GetProductsByShopIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByShopID indicates an expected call of GetProductsByShopID.
func (mr *MockRepositoryMockRecorder) GetProductsByShopID(ctx, shopID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByShopID", reflect.TypeOf((*MockRepository)(nil).GetProductsByShopID), ctx, shopID)
}

// GetWarehousesByShopID mocks base method.
func (m *MockRepository) GetWarehousesByShopID(ctx context.Context, shopID int64) ([]db.GetWarehousesByShopIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehousesByShopID", ctx, shopID)
	ret0, _ := ret[0].([]db.GetWarehousesByShopIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehousesByShopID indicates an expected call of GetWarehousesByShopID.
func (mr *MockRepositoryMockRecorder) GetWarehousesByShopID(ctx, shopID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehousesByShopID", reflect.TypeOf((*MockRepository)(nil).GetWarehousesByShopID), ctx, shopID)
}

// WithTx mocks base method.
func (m *MockRepository) WithTx(tx v5.Tx) *db.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(*db.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockRepositoryMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockRepository)(nil).WithTx), tx)
}
