// Code generated by MockGen. DO NOT EDIT.
// Source: app/repository/postgresql/db/querier.go
//
// Generated by this command:
//
//	mockgen -source=app/repository/postgresql/db/querier.go
//

// Package mock_dbgen is a generated GoMock package.
package mock_dbgen

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	dbgen "github.com/mughieams/evermos-assessment/app/repository/postgresql/db"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockQuerier) AddProduct(ctx context.Context, arg dbgen.AddProductParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockQuerierMockRecorder) AddProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockQuerier)(nil).AddProduct), ctx, arg)
}

// AddProductToStock mocks base method.
func (m *MockQuerier) AddProductToStock(ctx context.Context, arg dbgen.AddProductToStockParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductToStock", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductToStock indicates an expected call of AddProductToStock.
func (mr *MockQuerierMockRecorder) AddProductToStock(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToStock", reflect.TypeOf((*MockQuerier)(nil).AddProductToStock), ctx, arg)
}

// CreateOrder mocks base method.
func (m *MockQuerier) CreateOrder(ctx context.Context, arg dbgen.CreateOrderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockQuerierMockRecorder) CreateOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockQuerier)(nil).CreateOrder), ctx, arg)
}

// CreateShop mocks base method.
func (m *MockQuerier) CreateShop(ctx context.Context, arg dbgen.CreateShopParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShop", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShop indicates an expected call of CreateShop.
func (mr *MockQuerierMockRecorder) CreateShop(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShop", reflect.TypeOf((*MockQuerier)(nil).CreateShop), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg dbgen.CreateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// CreateWarehouse mocks base method.
func (m *MockQuerier) CreateWarehouse(ctx context.Context, arg dbgen.CreateWarehouseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarehouse", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWarehouse indicates an expected call of CreateWarehouse.
func (mr *MockQuerierMockRecorder) CreateWarehouse(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarehouse", reflect.TypeOf((*MockQuerier)(nil).CreateWarehouse), ctx, arg)
}

// DecreaseStock mocks base method.
func (m *MockQuerier) DecreaseStock(ctx context.Context, arg dbgen.DecreaseStockParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseStock", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseStock indicates an expected call of DecreaseStock.
func (mr *MockQuerierMockRecorder) DecreaseStock(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseStock", reflect.TypeOf((*MockQuerier)(nil).DecreaseStock), ctx, arg)
}

// GetProductByID mocks base method.
func (m *MockQuerier) GetProductByID(ctx context.Context, id int64) (dbgen.GetProductByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(dbgen.GetProductByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockQuerierMockRecorder) GetProductByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockQuerier)(nil).GetProductByID), ctx, id)
}

// GetProducts mocks base method.
func (m *MockQuerier) GetProducts(ctx context.Context) ([]dbgen.GetProductsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]dbgen.GetProductsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockQuerierMockRecorder) GetProducts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockQuerier)(nil).GetProducts), ctx)
}

// GetProductsByShopID mocks base method.
func (m *MockQuerier) GetProductsByShopID(ctx context.Context, shopID int64) ([]dbgen.GetProductsByShopIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByShopID", ctx, shopID)
	ret0, _ := ret[0].([]dbgen.GetProductsByShopIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByShopID indicates an expected call of GetProductsByShopID.
func (mr *MockQuerierMockRecorder) GetProductsByShopID(ctx, shopID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByShopID", reflect.TypeOf((*MockQuerier)(nil).GetProductsByShopID), ctx, shopID)
}

// GetUserByEmailOrPhone mocks base method.
func (m *MockQuerier) GetUserByEmailOrPhone(ctx context.Context, arg dbgen.GetUserByEmailOrPhoneParams) (dbgen.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailOrPhone", ctx, arg)
	ret0, _ := ret[0].(dbgen.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailOrPhone indicates an expected call of GetUserByEmailOrPhone.
func (mr *MockQuerierMockRecorder) GetUserByEmailOrPhone(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailOrPhone", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmailOrPhone), ctx, arg)
}

// GetWarehousesByShopID mocks base method.
func (m *MockQuerier) GetWarehousesByShopID(ctx context.Context, shopID int64) ([]dbgen.GetWarehousesByShopIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehousesByShopID", ctx, shopID)
	ret0, _ := ret[0].([]dbgen.GetWarehousesByShopIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehousesByShopID indicates an expected call of GetWarehousesByShopID.
func (mr *MockQuerierMockRecorder) GetWarehousesByShopID(ctx, shopID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehousesByShopID", reflect.TypeOf((*MockQuerier)(nil).GetWarehousesByShopID), ctx, shopID)
}

// IncreaseStock mocks base method.
func (m *MockQuerier) IncreaseStock(ctx context.Context, arg dbgen.IncreaseStockParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseStock", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseStock indicates an expected call of IncreaseStock.
func (mr *MockQuerierMockRecorder) IncreaseStock(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseStock", reflect.TypeOf((*MockQuerier)(nil).IncreaseStock), ctx, arg)
}

// ReserveStock mocks base method.
func (m *MockQuerier) ReserveStock(ctx context.Context, arg dbgen.ReserveStockParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveStock", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveStock indicates an expected call of ReserveStock.
func (mr *MockQuerierMockRecorder) ReserveStock(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveStock", reflect.TypeOf((*MockQuerier)(nil).ReserveStock), ctx, arg)
}

// UpdateOrderStatus mocks base method.
func (m *MockQuerier) UpdateOrderStatus(ctx context.Context, arg dbgen.UpdateOrderStatusParams) (dbgen.UpdateOrderStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, arg)
	ret0, _ := ret[0].(dbgen.UpdateOrderStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockQuerierMockRecorder) UpdateOrderStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateOrderStatus), ctx, arg)
}

// UpdateProductStock mocks base method.
func (m *MockQuerier) UpdateProductStock(ctx context.Context, arg dbgen.UpdateProductStockParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStock", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductStock indicates an expected call of UpdateProductStock.
func (mr *MockQuerierMockRecorder) UpdateProductStock(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStock", reflect.TypeOf((*MockQuerier)(nil).UpdateProductStock), ctx, arg)
}
