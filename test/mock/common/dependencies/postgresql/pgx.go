// Code generated by MockGen. DO NOT EDIT.
// Source: app/common/dependencies/postgresql/pgx.go
//
// Generated by this command:
//
//	mockgen -source=app/common/dependencies/postgresql/pgx.go
//

// Package mock_postgresql is a generated GoMock package.
package mock_postgresql

import (
	context "context"
	reflect "reflect"

	v5 "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockPgxPoolIface is a mock of PgxPoolIface interface.
type MockPgxPoolIface struct {
	ctrl     *gomock.Controller
	recorder *MockPgxPoolIfaceMockRecorder
	isgomock struct{}
}

// MockPgxPoolIfaceMockRecorder is the mock recorder for MockPgxPoolIface.
type MockPgxPoolIfaceMockRecorder struct {
	mock *MockPgxPoolIface
}

// NewMockPgxPoolIface creates a new mock instance.
func NewMockPgxPoolIface(ctrl *gomock.Controller) *MockPgxPoolIface {
	mock := &MockPgxPoolIface{ctrl: ctrl}
	mock.recorder = &MockPgxPoolIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxPoolIface) EXPECT() *MockPgxPoolIfaceMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockPgxPoolIface) Begin(ctx context.Context) (v5.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(v5.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockPgxPoolIfaceMockRecorder) Begin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPgxPoolIface)(nil).Begin), ctx)
}

// CopyFrom mocks base method.
func (m *MockPgxPoolIface) CopyFrom(ctx context.Context, tableName v5.Identifier, columnNames []string, rowSrc v5.CopyFromSource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", ctx, tableName, columnNames, rowSrc)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockPgxPoolIfaceMockRecorder) CopyFrom(ctx, tableName, columnNames, rowSrc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockPgxPoolIface)(nil).CopyFrom), ctx, tableName, columnNames, rowSrc)
}

// Exec mocks base method.
func (m *MockPgxPoolIface) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPgxPoolIfaceMockRecorder) Exec(ctx, sql any, arguments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPgxPoolIface)(nil).Exec), varargs...)
}

// Ping mocks base method.
func (m *MockPgxPoolIface) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPgxPoolIfaceMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPgxPoolIface)(nil).Ping), ctx)
}

// Query mocks base method.
func (m *MockPgxPoolIface) Query(ctx context.Context, sql string, args ...any) (v5.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(v5.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPgxPoolIfaceMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPgxPoolIface)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockPgxPoolIface) QueryRow(ctx context.Context, sql string, args ...any) v5.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(v5.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPgxPoolIfaceMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPgxPoolIface)(nil).QueryRow), varargs...)
}
