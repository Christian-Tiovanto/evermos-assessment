// Code generated by MockGen. DO NOT EDIT.
// Source: app/common/dependencies/postgresql/postgresql.go
//
// Generated by this command:
//
//	mockgen -source=app/common/dependencies/postgresql/postgresql.go
//

// Package mock_postgresql is a generated GoMock package.
package mock_postgresql

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDBConfig is a mock of DBConfig interface.
type MockDBConfig struct {
	ctrl     *gomock.Controller
	recorder *MockDBConfigMockRecorder
	isgomock struct{}
}

// MockDBConfigMockRecorder is the mock recorder for MockDBConfig.
type MockDBConfigMockRecorder struct {
	mock *MockDBConfig
}

// NewMockDBConfig creates a new mock instance.
func NewMockDBConfig(ctrl *gomock.Controller) *MockDBConfig {
	mock := &MockDBConfig{ctrl: ctrl}
	mock.recorder = &MockDBConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConfig) EXPECT() *MockDBConfigMockRecorder {
	return m.recorder
}

// ConnectionString mocks base method.
func (m *MockDBConfig) ConnectionString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionString")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectionString indicates an expected call of ConnectionString.
func (mr *MockDBConfigMockRecorder) ConnectionString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionString", reflect.TypeOf((*MockDBConfig)(nil).ConnectionString))
}
