// Code generated by MockGen. DO NOT EDIT.
// Source: app/common/dependencies/rabbitmq/rabbitmq.go
//
// Generated by this command:
//
//	mockgen -source=app/common/dependencies/rabbitmq/rabbitmq.go
//

// Package mock_rabbitmq is a generated GoMock package.
package mock_rabbitmq

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscription is a mock of Subscription interface.
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
	isgomock struct{}
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription.
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance.
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSubscription) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSubscriptionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubscription)(nil).Close))
}

// Consume mocks base method.
func (m *MockSubscription) Consume(queue string, consumerFunc func([]byte)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queue, consumerFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockSubscriptionMockRecorder) Consume(queue, consumerFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockSubscription)(nil).Consume), queue, consumerFunc)
}

// Publish mocks base method.
func (m *MockSubscription) Publish(queue string, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", queue, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockSubscriptionMockRecorder) Publish(queue, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockSubscription)(nil).Publish), queue, message)
}

// QueueDeclare mocks base method.
func (m *MockSubscription) QueueDeclare(queue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueDeclare indicates an expected call of QueueDeclare.
func (mr *MockSubscriptionMockRecorder) QueueDeclare(queue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockSubscription)(nil).QueueDeclare), queue)
}
