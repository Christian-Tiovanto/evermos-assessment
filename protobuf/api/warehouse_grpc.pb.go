// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: protobuf/api/warehouse.proto

package commerce_api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WarehouseService_ActivateWarehouse_FullMethodName   = "/mughieams.evermosassessment.v1.WarehouseService/ActivateWarehouse"
	WarehouseService_DeactivateWarehouse_FullMethodName = "/mughieams.evermosassessment.v1.WarehouseService/DeactivateWarehouse"
	WarehouseService_TransferProduct_FullMethodName     = "/mughieams.evermosassessment.v1.WarehouseService/TransferProduct"
	WarehouseService_UpdateProductStock_FullMethodName  = "/mughieams.evermosassessment.v1.WarehouseService/UpdateProductStock"
)

// WarehouseServiceClient is the client API for WarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseServiceClient interface {
	ActivateWarehouse(ctx context.Context, in *WarehouseIDRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeactivateWarehouse(ctx context.Context, in *WarehouseIDRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	TransferProduct(ctx context.Context, in *TransferProductRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	UpdateProductStock(ctx context.Context, in *UpdateProductStockRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type warehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseServiceClient(cc grpc.ClientConnInterface) WarehouseServiceClient {
	return &warehouseServiceClient{cc}
}

func (c *warehouseServiceClient) ActivateWarehouse(ctx context.Context, in *WarehouseIDRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, WarehouseService_ActivateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) DeactivateWarehouse(ctx context.Context, in *WarehouseIDRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, WarehouseService_DeactivateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) TransferProduct(ctx context.Context, in *TransferProductRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, WarehouseService_TransferProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) UpdateProductStock(ctx context.Context, in *UpdateProductStockRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, WarehouseService_UpdateProductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServiceServer is the server API for WarehouseService service.
// All implementations must embed UnimplementedWarehouseServiceServer
// for forward compatibility.
type WarehouseServiceServer interface {
	ActivateWarehouse(context.Context, *WarehouseIDRequest) (*MessageResponse, error)
	DeactivateWarehouse(context.Context, *WarehouseIDRequest) (*MessageResponse, error)
	TransferProduct(context.Context, *TransferProductRequest) (*MessageResponse, error)
	UpdateProductStock(context.Context, *UpdateProductStockRequest) (*MessageResponse, error)
	mustEmbedUnimplementedWarehouseServiceServer()
}

// UnimplementedWarehouseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWarehouseServiceServer struct{}

func (UnimplementedWarehouseServiceServer) ActivateWarehouse(context.Context, *WarehouseIDRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) DeactivateWarehouse(context.Context, *WarehouseIDRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) TransferProduct(context.Context, *TransferProductRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferProduct not implemented")
}
func (UnimplementedWarehouseServiceServer) UpdateProductStock(context.Context, *UpdateProductStockRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductStock not implemented")
}
func (UnimplementedWarehouseServiceServer) mustEmbedUnimplementedWarehouseServiceServer() {}
func (UnimplementedWarehouseServiceServer) testEmbeddedByValue()                          {}

// UnsafeWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServiceServer will
// result in compilation errors.
type UnsafeWarehouseServiceServer interface {
	mustEmbedUnimplementedWarehouseServiceServer()
}

func RegisterWarehouseServiceServer(s grpc.ServiceRegistrar, srv WarehouseServiceServer) {
	// If the following call pancis, it indicates UnimplementedWarehouseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WarehouseService_ServiceDesc, srv)
}

func _WarehouseService_ActivateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ActivateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_ActivateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ActivateWarehouse(ctx, req.(*WarehouseIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_DeactivateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).DeactivateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_DeactivateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).DeactivateWarehouse(ctx, req.(*WarehouseIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_TransferProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).TransferProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_TransferProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).TransferProduct(ctx, req.(*TransferProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_UpdateProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).UpdateProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_UpdateProductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).UpdateProductStock(ctx, req.(*UpdateProductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseService_ServiceDesc is the grpc.ServiceDesc for WarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mughieams.evermosassessment.v1.WarehouseService",
	HandlerType: (*WarehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateWarehouse",
			Handler:    _WarehouseService_ActivateWarehouse_Handler,
		},
		{
			MethodName: "DeactivateWarehouse",
			Handler:    _WarehouseService_DeactivateWarehouse_Handler,
		},
		{
			MethodName: "TransferProduct",
			Handler:    _WarehouseService_TransferProduct_Handler,
		},
		{
			MethodName: "UpdateProductStock",
			Handler:    _WarehouseService_UpdateProductStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/api/warehouse.proto",
}
